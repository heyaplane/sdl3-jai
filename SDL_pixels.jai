ALPHA_OPAQUE            :: 255;
ALPHA_OPAQUE_FLOAT      :: 1.0;
ALPHA_TRANSPARENT       :: 0;
ALPHA_TRANSPARENT_FLOAT :: 0.0;

Pixel_Type :: enum u32
{
    PIXELTYPE_UNKNOWN;
    PIXELTYPE_INDEX1;
    PIXELTYPE_INDEX4;
    PIXELTYPE_INDEX8;
    PIXELTYPE_PACKED8;
    PIXELTYPE_PACKED16;
    PIXELTYPE_PACKED32;
    PIXELTYPE_ARRAYU8;
    PIXELTYPE_ARRAYU16;
    PIXELTYPE_ARRAYU32;
    PIXELTYPE_ARRAYF16;
    PIXELTYPE_ARRAYF32;
    PIXELTYPE_INDEX2;
}

Bitmap_Order :: enum u32
{
    BITMAPORDER_NONE;
    BITMAPORDER_4321;
    BITMAPORDER_1234;
}

Packed_Order :: enum u32
{
    PACKEDORDER_NONE;
    PACKEDORDER_XRGB;
    PACKEDORDER_RGBX;
    PACKEDORDER_ARGB;
    PACKEDORDER_RGBA;
    PACKEDORDER_XBGR;
    PACKEDORDER_BGRX;
    PACKEDORDER_ABGR;
    PACKEDORDER_BGRA;
}

Array_Order :: enum u32
{
    ARRAYORDER_NONE;
    ARRAYORDER_RGB;
    ARRAYORDER_RGBA;
    ARRAYORDER_ARGB;
    ARRAYORDER_BGR;
    ARRAYORDER_BGRA;
    ARRAYORDER_ABGR;
}

Packed_Layout :: enum u32
{
    PACKEDLAYOUT_NONE;
    PACKEDLAYOUT_332;
    PACKEDLAYOUT_4444;
    PACKEDLAYOUT_1555;
    PACKEDLAYOUT_5551;
    PACKEDLAYOUT_565;
    PACKEDLAYOUT_8888;
    PACKEDLAYOUT_2101010;
    PACKEDLAYOUT_1010102;
}

DEFINE_PIXELFOURCC :: (a: u8, b: u8, c: u8, d: u8) -> u32 #expand {return FOURCC(a, b, c, d);}

Pixel_Format :: enum u32
{
    PIXELFORMAT_UNKNOWN       :: 0;
    PIXELFORMAT_INDEX1LSB     :: 0x11100100;
    PIXELFORMAT_INDEX1MSB     :: 0x11200100;
    PIXELFORMAT_INDEX2LSB     :: 0x1c100200;
    PIXELFORMAT_INDEX2MSB     :: 0x1c200200;
    PIXELFORMAT_INDEX4LSB     :: 0x12100400;
    PIXELFORMAT_INDEX4MSB     :: 0x12200400;
    PIXELFORMAT_INDEX8        :: 0x13000801;
    PIXELFORMAT_RGB332        :: 0x14110801;
    PIXELFORMAT_XRGB4444      :: 0x15120c02;
    PIXELFORMAT_XBGR4444      :: 0x15520c02;
    PIXELFORMAT_XRGB1555      :: 0x15130f02;
    PIXELFORMAT_XBGR1555      :: 0x15530f02;
    PIXELFORMAT_ARGB4444      :: 0x15321002;
    PIXELFORMAT_RGBA4444      :: 0x15421002;
    PIXELFORMAT_ABGR4444      :: 0x15721002;
    PIXELFORMAT_BGRA4444      :: 0x15821002;
    PIXELFORMAT_ARGB1555      :: 0x15331002;
    PIXELFORMAT_RGBA5551      :: 0x15441002;
    PIXELFORMAT_ABGR1555      :: 0x15731002;
    PIXELFORMAT_BGRA5551      :: 0x15841002;
    PIXELFORMAT_RGB565        :: 0x15151002;
    PIXELFORMAT_BGR565        :: 0x15551002;
    PIXELFORMAT_RGB24         :: 0x17101803;
    PIXELFORMAT_BGR24         :: 0x17401803;
    PIXELFORMAT_XRGB8888      :: 0x16161804;
    PIXELFORMAT_RGBX8888      :: 0x16261804;
    PIXELFORMAT_XBGR8888      :: 0x16561804;
    PIXELFORMAT_BGRX8888      :: 0x16661804;
    PIXELFORMAT_ARGB8888      :: 0x16362004;
    PIXELFORMAT_RGBA8888      :: 0x16462004;
    PIXELFORMAT_ABGR8888      :: 0x16762004;
    PIXELFORMAT_BGRA8888      :: 0x16862004;
    PIXELFORMAT_XRGB2101010   :: 0x16172004;
    PIXELFORMAT_XBGR2101010   :: 0x16572004;
    PIXELFORMAT_ARGB2101010   :: 0x16372004;
    PIXELFORMAT_ABGR2101010   :: 0x16772004;
    PIXELFORMAT_RGB48         :: 0x18103006;
    PIXELFORMAT_BGR48         :: 0x18403006;
    PIXELFORMAT_RGBA64        :: 0x18204008;
    PIXELFORMAT_ARGB64        :: 0x18304008;
    PIXELFORMAT_BGRA64        :: 0x18504008;
    PIXELFORMAT_ABGR64        :: 0x18604008;
    PIXELFORMAT_RGB48_FLOAT   :: 0x1a103006;
    PIXELFORMAT_BGR48_FLOAT   :: 0x1a403006;
    PIXELFORMAT_RGBA64_FLOAT  :: 0x1a204008;
    PIXELFORMAT_ARGB64_FLOAT  :: 0x1a304008;
    PIXELFORMAT_BGRA64_FLOAT  :: 0x1a504008;
    PIXELFORMAT_ABGR64_FLOAT  :: 0x1a604008;
    PIXELFORMAT_RGB96_FLOAT   :: 0x1b10600c;
    PIXELFORMAT_BGR96_FLOAT   :: 0x1b40600c;
    PIXELFORMAT_RGBA128_FLOAT :: 0x1b208010;
    PIXELFORMAT_ARGB128_FLOAT :: 0x1b308010;
    PIXELFORMAT_BGRA128_FLOAT :: 0x1b508010;
    PIXELFORMAT_ABGR128_FLOAT :: 0x1b608010;
    PIXELFORMAT_YV12          :: 0x32315659;
    PIXELFORMAT_IYUV          :: 0x56555949;
    PIXELFORMAT_YUY2          :: 0x32595559;
    PIXELFORMAT_UYVY          :: 0x59565955;
    PIXELFORMAT_YVYU          :: 0x55595659;
    PIXELFORMAT_NV12          :: 0x3231564e;
    PIXELFORMAT_NV21          :: 0x3132564e;
    PIXELFORMAT_P010          :: 0x30313050;
    PIXELFORMAT_EXTERNAL_OES  :: 0x2053454f;

// #if BYTEORDER == BIG_ENDIAN
// {
//     PIXELFORMAT_RGBA32 :: PIXELFORMAT_RGBA8888;
//     PIXELFORMAT_ARGB32 :: PIXELFORMAT_ARGB8888;
//     PIXELFORMAT_BGRA32 :: PIXELFORMAT_BGRA8888;
//     PIXELFORMAT_ABGR32 :: PIXELFORMAT_ABGR8888;
//     PIXELFORMAT_RGBX32 :: PIXELFORMAT_RGBX8888;
//     PIXELFORMAT_XRGB32 :: PIXELFORMAT_XRGB8888;
//     PIXELFORMAT_BGRX32 :: PIXELFORMAT_BGRX8888;
//     PIXELFORMAT_XBGR32 :: PIXELFORMAT_XBGR8888;
// }

// #if BYTEORDER != BIG_ENDIAN
// {
    PIXELFORMAT_RGBA32        :: 0x16762004;
    PIXELFORMAT_ARGB32        :: 0x16862004;
    PIXELFORMAT_BGRA32        :: 0x16362004;
    PIXELFORMAT_ABGR32        :: 0x16462004;
    PIXELFORMAT_RGBX32        :: 0x16561804;
    PIXELFORMAT_XRGB32        :: 0x16661804;
    PIXELFORMAT_BGRX32        :: 0x16161804;
    PIXELFORMAT_XBGR32        :: 0x16261804;
// }
}



Color :: struct
{
    r, g, b, a: u8;
}

F_Color :: struct
{
    r, g, b, a: float32;
}

Palette :: struct
{
    ncolors:  s32;
    colors:   Color;
    version:  u32;
    refcount: s32;
}

Colorspace :: enum u32
{
    COLORSPACE_UNKNOWN        :: 0;
    COLORSPACE_SRGB           :: 0x120005a0;
    COLORSPACE_SRGB_LINEAR    :: 0x12000500;
    COLORSPACE_HDR10          :: 0x12002600;
    COLORSPACE_JPEG           :: 0x220004c6;
    COLORSPACE_BT601_LIMITED  :: 0x211018c6;
    COLORSPACE_BT601_FULL     :: 0x221018c6;
    COLORSPACE_BT709_LIMITED  :: 0x21100421;
    COLORSPACE_BT709_FULL     :: 0x22100421;
    COLORSPACE_BT2020_LIMITED :: 0x21102609;
    COLORSPACE_BT2020_FULL    :: 0x22102609;
    COLORSPACE_RGB_DEFAULT    :: COLORSPACE_SRGB;
    COLORSPACE_YUV_DEFAULT    :: COLORSPACE_JPEG;
}
